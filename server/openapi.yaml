openapi: "3.0.3"

tags:
  - name: humans
    description: Human info operation
  - name: posts
    description: Post info operation

info:
  title: "Human picture book API"
  description: |
    # Features
    - Get humans info
    - Post humans info, post with picture.
    - Put humans info, post with picture.
    - Delete humans info, post with picture.
  contact:
    name: "Yasuaki Watanabe"
    email: "yasuaki640@gmail.com"
  version: "1.0.0"
  license:
    name: "MIT License"
    url: "https://opensource.org/licenses/MIT"

servers:
  - url: "http://localhost/{version}"
    description: "Development Environment"
    variables:
      version:
        description: "API version"
        enum: [ "v1" ]
        default: "v1"

paths:
  "/humans":
    get:
      summary: "Get all humans"
      description: "Get all humans with pictures"
      tags: [ "humans" ]
      responses:
        "200":
          description: "Success operation"
        "400":
          $ref: "#/components/responses/400-BadRequest"
        "500":
          $ref: "#/components/responses/500-ServerError"
    post:
      summary: "Create a human"
      description: "Create a human with specified info and a picture"
      tags: [ "humans" ]
      responses:
        "200":
          description: "Success operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Human"
        "400":
          $ref: "#/components/responses/400-BadRequest"
        "500":
          $ref: "#/components/responses/500-ServerError"
      requestBody:
        description: "Info of humans to be registered"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HumanRequest"
  "/humans/{HumanID}":
    parameters:
      - $ref: "#/components/parameters/HumanID"
    get:
      summary: "Get a human"
      description: "Get a human has specified ID with pictures"
      tags: [ "humans" ]

      responses:
        "200":
          description: "Success operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Human"
        "400":
          $ref: "#/components/responses/400-BadRequest"
        "500":
          $ref: "#/components/responses/500-ServerError"
    put:
      summary: "Update a human"
      description: "Update a human with specified info and a picture"
      tags: [ "humans" ]

      requestBody:
        description: "Info of humans to be registered"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HumanRequest"
      responses:
        "200":
          description: "Success operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Human"
        "400":
          $ref: "#/components/responses/400-BadRequest"
        "500":
          $ref: "#/components/responses/500-ServerError"
    delete:
      summary: "Delete a human"
      description: "Delete a human with specified info and a picture"
      tags: [ "humans" ]

      responses:
        "200":
          description: "Success operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string,example: "Deleted a human ID: 1" }
        "400":
          $ref: "#/components/responses/400-BadRequest"
        "500":
          $ref: "#/components/responses/500-ServerError"
  "/humans/{HumanID}/posts":
    parameters:
      - $ref: "#/components/parameters/HumanID"
    get:
      summary: "Get posts linked specified human ID"
      description: "Get posts linked specified human ID with pictures"
      tags: [ "humans" ]
      responses:
        "200":
          description: "Success operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Human"
        "400":
          $ref: "#/components/responses/400-BadRequest"
        "500":
          $ref: "#/components/responses/500-ServerError"
security: [ ]

components:
  schemas:
    Human:
      type: object
      properties:
        ID: { type: number, example: 1 }
        Name: { type: string, example: "堀北真希" }
        Sex: { type: number, example: 2 }
        Birthday: { type: string, format: date-time, example: "堀北真希" }
        Description: { type: string, example: "東京都出身..." }
        Favorability: { type: integer, minimum: 0, maximum: 10, example: "8" }
        CreatedAt:
          { type: string, format: date-time }
        UpdatedAt:
          { type: string, format: date-time }
        DeletedAt:
          { type: string, format: date-time }
    HumanRequest:
      type: object
      properties:
        Name: { type: string, example: "堀北真希" }
        Sex: { type: number, example: "2" }
        Birthday: { type: string, example: "1996-06-18T00:00:00Z" }
        Description: { type: string, example: "東京都出身..." }
        Favorability: { type: number, example: "8" }
    Posts:
      type: object
      properties:
        ID: { type: number, example: 1 }
        Name: { type: string, example: "堀北真希" }
        Sex: { type: number, example: 2 }
        Birthday: { type: string, format: date-time, example: "堀北真希" }
        Description: { type: string, example: "東京都出身..." }
        Favorability: { type: integer, minimum: 0, maximum: 10, example: "8" }
        CreatedAt:
          { type: string, format: date-time }
        UpdatedAt:
          { type: string, format: date-time }
        DeletedAt:
          { type: string, format: date-time }
    ClientError:
      type: object
      properties:
        message: { type: string, example: "Invalid value error" }
        errors:
          type: array
          items:
            type: object
            properties:
              resource: { type: string,example: "Human" }
              field: { type: string,example: "ID" }
              code: { type: string, example: "invalid_value" }
  responses:
    500-ServerError:
      description: "Internal server error"
      content:
        application/json:
          schema:
            type: object
            properties:
              message: { type: string ,example: "Unexpected error occured" }
    400-BadRequest:
      description: "Bad request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ClientError"

  parameters:
    HumanID:
      name: HumanID
      in: path
      required: true
      schema: { type: number }
      example: "1"
    PostID:
      name: PostID
      in: path
      required: true
      schema: { type: number }
      example: "1"